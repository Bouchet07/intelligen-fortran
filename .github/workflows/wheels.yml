name: Build

on:
  release:
    types: [created]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        #os: [ubuntu-latest, windows-latest, macos-latest]
        os: [windows-latest]
        gcc_v: [10]
    env:
      FC: gfortran-${{ matrix.gcc_v }}
      GCC_V: ${{ matrix.gcc_v }}

    steps:
      - uses: actions/checkout@v3

      # Used to host cibuildwheel
      - uses: actions/setup-python@v3

      - name: Install dependencies
        run: pip install -e ../intelligen

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.4.0

      - name: Install GFortran Linux
        if: contains(matrix.os, 'ubuntu')
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y gcc-${GCC_V} gfortran-${GCC_V}
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_V} 100 \
          --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${GCC_V} \
          --slave /usr/bingcov gcov /usr/bin/gcov-${GCC_V}

      - name: Install GFortran macos
        if: contains(matrix.os, 'macos')
        run: brew install gcc@${GCC_V} || brew upgrade gcc@${GCC_V} || true

      - name: Build wheels
        run: python -m cibuildwheel --output-dir dist
        # to supply options, put them in 'env', like:
        # env:
        #   CIBW_SOME_OPTION: value
        env:
          CIBW_BEFORE_BUILD: pip install certifi oldest-supported-numpy
          CIBW_BUILD: cp36-* cp37-* cp38-* cp39-* cp310-*
          #CIBW_BEFORE_BUILD_WINDOWS: pip install delvewheel
          #CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: delvewheel repair -w {dest_dir} {wheel}

      - uses: actions/upload-artifact@v3
        with:
          path: ./dist/*.whl


  make_sdist:
      name: Make SDist
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v3

      - name: Build SDist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
      needs: [build_wheels, make_sdist]
      runs-on: ubuntu-latest
      # upload to PyPI on every tag starting with 'v'
      #if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      # alternatively, to publish when a GitHub Release is created, use the following rule:
      #if: github.event_name == 'release' && github.event.action == 'created'
      steps:
        - uses: actions/download-artifact@v2
          with:
            name: artifact
            path: dist

        - uses: pypa/gh-action-pypi-publish@v1.4.2
          with:
            user: ${{ secrets.PYPI_USERS }}
            password: ${{ secrets.PYPI_PASSWORD }}
            # To test: repository_url: https://test.pypi.org/legacy/